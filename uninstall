#!/usr/bin/env bash

shopt -s expand_aliases
set -e

# set up command line parsing via getopts
# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-cd]
Remove all traces of Jupyter.app

    -h    Display this help and exit.
    -d    Dry run. For debug purposes, echo commands instead of running them.
EOF
}

# Initialize our own variables:
dryrun=false

OPTIND=1
# Resetting OPTIND is necessary if getopts was used previously in the script.
# It is a good idea to make OPTIND local if you process options in a function.

while getopts hdr opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        d)  dryrun=true
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"   # Discard the options and sentinel --

# define the dryrun echo command as appropriate
alias dryecho=
if [ "$dryrun" = true ]; then
    alias dryecho='echo'
fi

# get some user-defined and project-wide vars
reldir=$(dirname "$(stat -f "$0")")
source "${reldir}"/resource/globals

app_path="${ABS_APP_PATH}"
app_support_path="${ABS_APP_SUPPORT_PATH}"
cache_path="${ABS_CACHE_PATH}"
preferences_path="${ABS_PREFERENCES_PATH}"

# remove the app
printf "removing the app...\n"
dryecho rm -rf "${app_path}"
printf "done\n\n"

# remove the user-data-dir
printf "removing the user-data-dir...\n"
dryecho rm -rf "${app_support_path}"
printf "done\n\n"

# remove the app's cache
printf "removing the cache...\n"
dryecho rm -rf "${cache_path}"
printf "done\n\n"

# remove the app's preferences dir
printf "removing the preferences...\n"
dryecho rm -rf "${preferences_path}"
printf "done\n\n"
