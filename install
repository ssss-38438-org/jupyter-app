#!/usr/bin/env bash

shopt -s expand_aliases
set -e

# set up command line parsing via getopts
# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-cd]
Set up links between your {HOME} dir and the dotfiles in {DOT_HOME}

    -h    Display this help and exit.
    -d    Dry run. For debug purposes, echo commands instead of running them.
EOF
}

# if true, perform a dryrun
dryrun=false

# for internal dev purposes.
devmode=false

OPTIND=1
# Resetting OPTIND is necessary if getopts was used previously in the script.
# It is a good idea to make OPTIND local if you process options in a function.

while getopts hdtr opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        d)  dryrun=true
            ;;
        t)  devmode=true
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"   # Discard the options and sentinel --

# define the dryrun echo command as appropriate
alias dryecho=
if [ "$dryrun" = true ]; then
    alias dryecho='echo'
fi

# helper function(s)
sedvar() {
    fname=$1
    shift 1

    for var in $@; do
        # the \$[{]* ... [}]* part will match vars with or without curly braces
        dryecho sed -i '' "s#\$[{]*$var[}]*#${!var}#g" ${fname}
    done
}

# replace the value for a key in a .strings file
sedStringsFile() {
    key=$1
    val=$2
    path=$3

    sed -i '' "s/$key.*/$key = \"$val\";/g" $path
}

# get some user-defined and project-wide vars
reldir=$(dirname "$(stat -f "$0")")
globals_src="${reldir}"/resource/globals
source ${globals_src}


# make a temporary dir
temp=$TMPDIR$(uuidgen)
dryecho mkdir -p "${temp}/mount"


# decide where to save the chrome .dmg
if [ "$devmode" = true ]; then
    dmgloc="./${BROWSER_NAME}.dmg"
else
    dmgloc="${temp}/${BROWSER_NAME}.dmg"
fi


# download the app
if ! [ "$devmode" = true -a -f ${dmgloc} ]; then
    "${reldir}"/script/download/${BROWSER_NAME} $dmgloc
#    printf "downloading vanilla google chrome...\n"
#    dryecho curl https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg -o ${dmgloc}
#    printf "done\n\n"
fi


# install the app
printf "installing vanilla google chrome...\n"
if [ "$dryrun" = true ]; then
    # special dryrun handling is required here due to all of the > and | characters
    dryecho yes \| hdiutil attach -noverify -nobrowse -mountpoint "${temp}/mount" ${dmgloc} \> /dev/null 2\>\&1
    dryecho cp -r "$temp"/mount/*.app "${ABS_APP_PATH}"
    dryecho hdiutil detach "${temp}/mount" \> /dev/null 2\>\&1
else
    yes | hdiutil attach -noverify -nobrowse -mountpoint "${temp}/mount" ${dmgloc} > /dev/null 2>&1
    cp -r "$temp"/mount/*.app "${ABS_APP_PATH}"
    hdiutil detach "${temp}/mount" > /dev/null 2>&1
fi
printf "done\n\n"


# clean up the temp dir
printf "cleaning up google chrome install files...\n"
dryecho rm -r "${temp}"
printf "done\n\n"


# change the icon
printf "changing app icon from chrome to jupyter...\n"
dryecho cp "${ABS_ICONS_SRC}" "${ABS_ICONS}"
printf "done\n\n"


# rename the chrome exe
printf "renaming chrome executable...\n"
dryecho mv "${ABS_APP_BIN_SRC}" "${ABS_APP_BIN}"
printf "done\n\n"


# copy over the outer wrapper script, which handles the terminal window
printf "copying outer wrapper script over to app...\n"
dryecho cp "${ABS_OUTER_WRAP_SRC}" "${ABS_OUTER_WRAP}"
printf "setting vars in outer wrapper script...\n"
sedvar "${ABS_OUTER_WRAP}" TERM_NAME JUPYTER_BIN JUPYTER_CMD JUPYTER_NOTEBOOK_DIR ABS_INNER_WRAP BROWSER_CMD
printf "done\n\n"


# copy over the inner wrapper script, which automatically passes certain arguments to the chrome bin
printf "copying inner wrapper script over to app...\n"
dryecho cp "${ABS_INNER_WRAP_SRC}" "${ABS_INNER_WRAP}"
printf "setting vars in inner wrapper script...\n"
sedvar "${ABS_INNER_WRAP}" ABS_APP_SUPPORT ABS_APP_BIN
printf "done\n\n"


# modify the app's plist's exe to point to the script we just copied over
printf "Modifying app's Info.plist to point to executable scripts...\n"
dryecho plutil -replace CFBundleExecutable -string "${APP_NAME}" "${ABS_CONTENTS}/Info.plist"
printf "done\n\n"


# modify the app's plist's bundle name
printf "Modifying app's Info.plist...\n"
dryecho plutil -replace CFBundleDisplayName -string "${APP_NAME}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace CFBundleIdentifier  -string "${BUNDLE_ID}" "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace CFBundleName        -string "${APP_NAME}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace KSBrandID           -string "${BRAND_ID}"  "${ABS_CONTENTS}/Info.plist"
dryecho plutil -replace KSProductID         -string "${BUNDLE_ID}" "${ABS_CONTENTS}/Info.plist"
printf "done\n\n"

# modify the localization strings. Fixes visible name in finder
printf "Modifying app's localized .strings resources...\n"
dryecho find "${ABS_RESOURCES}" -name "InfoPlist.strings" -exec sedStringsFile CFBundleDisplayName "${APP_NAME}" {} +
dryecho find "${ABS_RESOURCES}" -name "InfoPlist.strings" -exec sedStringsFile CFBundleName "${APP_NAME}" {} +
#dryecho find "${ABS_RESOURCES}" -name "InfoPlist.strings" -exec sed -i '' "s/CFBundleDisplayName.*/CFBundleDisplayName = \"${APP_NAME}\";/g" {} +
printf "done\n\n"


# optionally install any extension manifests to the new Chrome instance's 'Application Support' dir
if [ "$EXTENSIONS" = true ]; then
    printf "Adding extension manifests to \"${ABS_EXTENSION_JSON}\"...\n"
    # create the External Extensions dir if it doesn't exist
    dryecho mkdir -p "${ABS_EXTENSION_JSON}"
    for extjson in "${ABS_EXTENSION_JSON_SRC}"; do
        dryecho cp "${extjson}" "${ABS_EXTENSION_JSON}"
    done
    printf "done\n\n"
fi
